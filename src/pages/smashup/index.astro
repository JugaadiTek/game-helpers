---
import bases from '@data/smashup/bases.json';
import data from '@data/smashup/active/active.json';
import { Code } from 'astro:components';
const baselist = bases.data;
// get the active factions and merge them into a single array
const factions = data.players.map(player => player.factions).flat();
// filter the bases to only bases that are from the active factions
const basedeck = baselist.filter(base => factions.includes(base.faction));
// filter basedeck to only active bases
const activebases = basedeck.filter(base => data.gamedata.active_bases.includes(base.base));

---
<!-- Smashup Cheatsheet and Score Card -->
<html>
  <body>
    <main>
        <div class="quickRef">
            <div class="turns">
                <h2>Phases of a Turn</h2>
                <div class="phases"><h3>1: Start Turn</h3></div>
                <div class="phases">
                    <h3>2: Play Cards</h3>
                    <p>1 Action & 1 Minion, any order</p>
                </div>
                <div class="phases">
                    <h3>3: Score Bases</h3>
                    <p>For each base, is minion total power equal to its breakpoint?</p>
                    <h4>Yes!</h4>
                    <ol class="steps">
                        <li>Before Base Scores</li>
                        <li>Score Bases</li>
                        <li>After Base Scores</li>
                    </ol>
                </div>
                <div class="phases"><h3>4: Draw 2 Cards</h3></div>
                <div class="phases"><h3>5: End Turn</h3></div>
            </div>
            <hr/>
            <div class="baselist">
                <h2>Deck of Bases</h2>
                <ul>
                    {basedeck.map(base => (
                        <li><span>{base.faction}</span><span>{base.base}</span></li>
                    ))}
                </ul>
            </div>
        </div>
        <div class="standings">
            <h1>Standings</h1>
            <table class="score-card">
                <thead>
                    <tr>
                        <th rowspan="3" class="rt">#</th>
                        <th rowspan="2" class="p">Player</th>
                        {data.players.map(player => (
                            <th>{player.name}</th>
                        ))}
                    </tr>
                    <tr class="factions">
                        {data.players.map(player => (
                            <th>{player.factions[0]} <br/><hr/> {player.factions[1]}</th>
                        ))}
                    </tr>
                    <tr class="total-scores">
                        <th>Victory Points!</th>
                        {data.score.current.map(score => (
                            <td class="player-total">{score}</td>
                        ))}
                    </tr>
                </thead>
                <tbody>
                    { data.score.log.map((round, roundIndex) => (                               /* iterate through the rounds of the game */
                        round.some(r => Object.keys(r).length > 0) ? (                          /* if the 'round' array has objects with keys, output them */
                            round.map((turn, turnIndex) => (                                    /* iterate through the turns of the round */
                                turn.scoring? turn.scoring.map((score, scoreIndex) => (         /* if turn.scoring exists, output a row with the scoring data */
                                    <tr data-r={roundIndex} data-t={turnIndex} class="turn scoring">
                                        {scoreIndex == 0 ?                                      /* create tds for round & turn that cover all rows, only once */
                                            <th class="rt-num" rowspan={turn.scoring.length}><span>{roundIndex} - {turnIndex}</span></th>
                                        : null }
                                        <td class="base">{score.base}</td>
                                        {score.vps[1].length == 0 ? 
                                            score.vps[0].map((vp, vpIndex) => (                 /* if scores do not have modifiers, output only first array */
                                                <td class="vps" data-vp={vp}>
                                                    <span class="vp">{vp}</span>
                                                </td>
                                            )) : score.vps[0].map((vp, vpIndex) => (            /* if scores have modifiers, output both as text */
                                                <td class="vps" data-vp={vp + score.vps[1][vpIndex]}>
                                                    <span class="vp">{vp}</span>
                                                    <span class="vp-mods">{score.vps[1][vpIndex]}</span>
                                                </td>
                                            ))
                                        }
                                    </tr>
                                )) : null
                            ))
                        ) : <tr data-r={roundIndex} class="round noscore"><th class= "rt-num blank"></th><td colspan="5">Round {roundIndex}</td></tr> 
                    ))} 
                </tbody>
            </table>
        </div>
        <div class="active-bases">
            <h1>Active Bases</h1>
            <div>
                {activebases.map(base => (
                    <div class="card">
                        <h2><span class="bp">{base.bp}</span> | {base.base}</h2>
                        <ul class="vps">
                            {base.vps.map(vp => (
                                <li>{vp}</li>
                            ))}
                        </ul>
                        <p class="ability">{base.ability}</p>
                    </div>
                ))}
            </div>
        </div>
        <Code code={JSON.stringify(data, null, 2)} lang="json"/>
    </main>
  </body>
</html>
<style>
body {
    background: #221000;
    color: #ddd;
    font-family: sans-serif;
}
main {
    display: grid;
    grid-template-columns: 300px 1fr 500px; 
    gap: 1rem;
    padding: 1rem;
}
table {
    border-collapse: collapse;
    width: 100%;
    text-align: center;
}
thead th, td {
    padding: 0.5rem;
}
tr.noscore td{
    padding:2px;
    color:#aaa;
    font-weight: bold;
    font-size:12px;
    border: 1px solid #262626;
    border-radius: 0.5rem;
    box-shadow: 0 0 10px 2px #000 inset;
}
thead {
    border: 1px solid #777;
    background-color: #442400;
    color: #ddd;
}
thead th {
    font-weight: bold;
    font-size: 1.25rem;
}
thead tr.total-scores th,
thead tr.total-scores td {
    border-top: 2px solid #555;
    background-color: #221400;
    font-weight: bold;
    font-size: 1.5rem;
}
thead tr.total-scores th {
    border-left: 1px solid #777;
}
thead tr.total-scores td {
    font-family: monospace;
    padding: 0;
    margin:0;
}
th.rt {
    width: 32px;
    font-size: 1.5rem;
    font-weight: bold;
    background-color: #442400;
    color: #ddd;
}
th.rt-num {
    border-right: 1px solid #777;
    border-left: 1px solid #777;
}
tbody tr:last-child th {
    border-bottom-width: 1px;
    border-bottom-style: solid;
    border-bottom-color: #444;
} 
.scoring th.rt-num {
    padding:0;
    margin:0;
    /* font-family: monospace; */
    font-size: 12px;
    font-weight: bold;
    background-color: #442400;
    color: #aaa;
    
}
.scoring th.rt-num {
    border-top: 1px solid #777;
    border-bottom: 1px solid #777;
}
.noscore th.rt-num {
    border-color: #111;
    background-color: #181200;
}
.baselist ul {
    list-style-type: none;
    margin: 0;
    padding: 0;
}
.baselist ul li {
    display: flex;
    justify-content: space-between;
    padding: 0rem;
    /* border-bottom: 1px solid #777;*/
    font-size: 1rem;
}
/* 
    table {
        border-collapse: collapse;
        width: 100%;
        text-align: center;
    }
    thead th, td {
        border-bottom: 1px solid #777;
        padding: 0.5rem;
    }
    thead {
        border: 1px solid #777;
    }
    th {
        background-color: #442400;
        font-weight: bold;
        font-size: 1.25rem;
    }
    tbody td.fail {
        background:#000;
    }
    tbody td {
        font-family: monospace;
        font-size: 1.25em;
    }
    tbody th {
        font-size:1.25em;
        font-weight:600;
        background-color: #230000;
    }
  h1 {
    color: #cfcf00;
  }
  body > div {
    border: 1px solid black;
  }
  body {
    display:grid;
    /* grid-template-columns: 32px 1fr 500px; */
    /* grid-template-columns: 1fr 700px; 
    gap: 1rem;
    padding: 1rem;
    background: #221000;
    color: #ddd;
    font-family: sans-serif;
  }
  .active-bases {
    /* card container, vertical, glassmorphism */
    /* display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1rem;
    padding: 1rem;
  }
  .active-bases h1 {
    font-size: 2.5rem;
    font-weight: bold;
    color: #fff;
    text-shadow: 1px 1px 2px #000;
    margin:unset;
  }
  .card {
    /* dark purple glassmorphism */
    /* background: rgba(105, 50, 0, 0.4);
    box-shadow: 0 8px 16px 0 rgba( 31, 38, 135, 0.37 );
    backdrop-filter: blur(10px);
    border-radius: 0.5rem;
    margin: 1rem 0;
    padding: 1rem;
  }
    .card h2 {
        font-size: 2.5rem;
        font-weight: bold;
        color: #fff;
        text-shadow: 1px 1px 2px #000;
    }
    .card p {
        color: #fff;
        text-shadow: 1px 1px 2px #000;
        font-size: 1.4em;
        font-weight:100;
        margin-top:0.5em !important;
    }
  .card ul {
    display:none;
  }
  .card li, .card ul {
    list-style-type: none;
    margin: 0;
    padding: 0;
  }
  .card li {
    margin: 0.5rem;
    display: inline-block;
    font-family: impact;
    font-size: 3rem;
  }
  .card ul, .card p, .card h2 {
    margin:0;
    padding: 0;
  }
  td.fail {
    padding:1px;
    border-bottom:1px solid #555;
  }
.turns{
    display:none;
}
.active-bases{
    display:flex;
    flex-direction:row;
    flex-wrap:wrap;
}
tr th.x-fail {
    font-size:1px;
}
th hr {
    border: 1px dashed #555;
    width: 100%;
    margin: 0.1rem 0;
}
.round.none td {
    background: #000;
    color: #bbb;
    text-align: center;
    padding: 1px;
    font-size:12px;
    border-bottom: 1px solid #333;
}
.turn.x td {
    background: #000;
    color: #bbb;
    text-align: center;
    padding: 1px;
    font-size:12px;
    border-bottom: 1px solid #333;
} */
</style>