---
import bases from '@data/smashup/bases.json';
import data from '@data/smashup/active/active.json';
import { Code } from 'astro:components';
const baselist = bases.data;
// get the active factions and merge them into a single array
const factions = data.players.map(player => player.factions).flat();
// filter the bases to only bases that are from the active factions
const basedeck = baselist.filter(base => factions.includes(base.faction));
// filter basedeck to only active bases
const activebases = basedeck.filter(base => data.gamedata.active_bases.includes(base.base));
---
<!-- Smashup Cheatsheet and Score Card -->
<html>
  <body>
    <div class="turns">
        <h1>Phases of a Turn</h1>
        <div class="phases"><h2>1: Start Turn</h2></div>
        <div class="phases"><h2>2: Play Cards</h2></div>
        <div class="phases">
            <h2>3: Score Bases</h2>
            <div class="steps">
                <h3>1: Before Base Scores</h3>
                <h3>2: Score Bases</h3>
                <h3>3: After Base Scores</h3>
            </div>
        </div>
        <div class="phases"><h2>4: Draw 2 Cards</h2></div>
        <div class="phases"><h2>5: End Turn</h2></div>
    </div>
    <div class="standings">
        <h1>Standings</h1>
        <table class="score-card">
            <thead>
                <tr>
                    <th class="r">R</th>
                    <th class="t">T</th>
                    <th class="p">Player</th>
                    {data.players.map(player => (
                        <th>{player.name}</th>
                    ))}
                </tr>
                <tr class="factions">
                    <th></th><th></th>
                    <th>Factions</th>
                        {data.players.map(player => (
                        <th>{player.factions[0]} <br/><hr/> {player.factions[1]}</th>
                    ))}
                </tr>
                <tr class="vps">
                    <th></th><th></th>
                    <th>VPs</th>
                    {data.score.current.map(score => (
                        <th>{score}</th>
                    ))}
                </tr>
            </thead>
            <tbody>
                {data.score.log.map((x, index) => (
                    <tr>
                        {score.type === "x" ? 
                            <th></th><th></th><th class="x-fail">x</th>: 
                            <td class="r">{score.r}</td><td class="t">{score.t}</td>
                            <th>{score.base}</th>
                        }
                        {score.vps.map(vp => (
                            // if vp is null, set class to fail, else set class to b
                            <td class={vp === 0 ? 'fail' : 'b'}>{vp === 0 ? '' : vp}</td>
                        ))}
                    </tr>
                ))}
            </tbody>
        </table>
    </div>
    <div class="active-bases">
        <h1>Active Bases</h1>
        <div>
            {activebases.map(base => (
                <div class="card">
                    <h2><span class="bp">{base.bp}</span> | {base.base}</h2>
                    <ul class="vps">
                        {base.vps.map(vp => (
                            <li>{vp}</li>
                        ))}
                    </ul>
                    <p class="ability">{base.ability}</p>
                </div>
            ))}
        </div>
    </div>
    <Code code={JSON.stringify(data, null, 2)} lang="json"/>
    <div class="baselist">
        <h2>Deck of Bases</h2>
        <ul>
            {basedeck.map(base => (
                <li>{base.base}</li>
            ))}
        </ul>
    </div>
  </body>
</html>
<style>
    table {
        border-collapse: collapse;
        width: 100%;
        text-align: center;
    }
    thead th, td {
        border-bottom: 1px solid #777;
        padding: 0.5rem;
    }
    thead {
        border: 1px solid #777;
    }
    th {
        background-color: #442400;
        font-weight: bold;
        font-size: 1.25rem;
    }
    tbody td.fail {
        background:#000;
    }
    tbody td {
        font-family: monospace;
        font-size: 1.25em;
    }
    tbody th {
        font-size:1.25em;
        font-weight:600;
        background-color: #230000;
    }
  h1 {
    color: #cfcf00;
  }
  body > div {
    border: 1px solid black;
  }
  body {
    display:grid;
    /* grid-template-columns: 32px 1fr 500px; */
    grid-template-columns: 1fr 700px; 
    gap: 1rem;
    padding: 1rem;
    background: #221000;
    color: #ddd;
    font-family: sans-serif;
  }
  .active-bases {
    /* card container, vertical, glassmorphism */
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1rem;
    padding: 1rem;
  }
  .active-bases h1 {
    font-size: 2.5rem;
    font-weight: bold;
    color: #fff;
    text-shadow: 1px 1px 2px #000;
    margin:unset;
  }
  .card {
    /* dark purple glassmorphism */
    background: rgba(105, 50, 0, 0.4);
    box-shadow: 0 8px 16px 0 rgba( 31, 38, 135, 0.37 );
    backdrop-filter: blur(10px);
    border-radius: 0.5rem;
    margin: 1rem 0;
    padding: 1rem;
  }
    .card h2 {
        font-size: 2.5rem;
        font-weight: bold;
        color: #fff;
        text-shadow: 1px 1px 2px #000;
    }
    .card p {
        color: #fff;
        text-shadow: 1px 1px 2px #000;
        font-size: 1.4em;
        font-weight:100;
        margin-top:0.5em !important;
    }
  .card ul {
    display:none;
  }
  .card li, .card ul {
    list-style-type: none;
    margin: 0;
    padding: 0;
  }
  .card li {
    margin: 0.5rem;
    display: inline-block;
    font-family: impact;
    font-size: 3rem;
  }
  .card ul, .card p, .card h2 {
    margin:0;
    padding: 0;
  }
  td.fail {
    padding:1px;
    border-bottom:1px solid #555;
  }
.turns{
    display:none;
}
.active-bases{
    display:flex;
    flex-direction:row;
    flex-wrap:wrap;
}
tr th.x-fail {
    font-size:1px;
}
th hr {
    border: 1px dashed #555;
    width: 100%;
    margin: 0.1rem 0;
}
</style>