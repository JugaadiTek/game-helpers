---
import bases from '@data/smashup/bases.json';
import data from '@data/smashup/active/active.json';
import { Code } from 'astro:components';
const baselist = bases.data;
// get the active factions and merge them into a single array
const factions = data.players.map(player => player.factions).flat();
// filter the bases to only bases that are from the active factions
const basedeck = baselist.filter(base => factions.includes(base.faction));
// filter basedeck to only active bases
const activebases = basedeck.filter(base => data.gamedata.active_bases.includes(base.base));

---
<!DOCTYPE html>
<!-- This is a cheat sheet for Smashup, a card game. It shows the phases of a turn, the deck of bases, and the standings of the players. -->
<html lang="en" class="dark">
  <head>
    {/* Emoji Paste: ‚ñ∂Ô∏è‚èÆÔ∏è‚è©üÉèüèÜüéÆüïπÔ∏è */}
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content="Smashup Game Tracker and Quick Reference Cheat sheet." />
    <meta name="author" content="JugaadiTech" />
    <meta name="keywords" content="Smashup, Card Game, Tracker, Cheat Sheet, Quick Reference, TTG Tool, CCG Tool" />
    <meta name="robots" content="index, follow" />
    <meta name="googlebot" content="index, follow" />
    <meta name="theme-color" content="#221000" />
    <link rel="canonical" href="https://ttg-helpers.jugaadlabs.com/smashup" />
    <!-- Open Graph / Facebook -->
    <meta property="og:title" content="JugaadiTech's Smashup Game Tracker" />
    <meta property="og:description" content="Smashup Game Tracker and Quick Reference Cheat sheet." />
    <meta property="og:image" content="/public/img/favicon/smashup.png" />
    <meta property="og:url" content="https://ttg-helpers.jugaadlabs.com/smashup" />
    <meta property="og:type" content="website" />
    <meta property="og:locale" content="en_US" />
    <meta property="og:site_name" content="JugaadiTech" />
    <!-- Twitter Card -->
    <meta name="twitter:title" content="JugaadiTech's Smashup Game Tracker" />
    <meta name="twitter:description" content="Smashup Game Tracker and Quick Reference Cheat sheet." />
    <meta name="twitter:image" content="/public/img/favicon/smashup.png" />
    <meta name="twitter:card" content="" />
    <meta name="twitter:site" content="@jugaadlabs" />
    <meta name="twitter:creator" content="@jugaadlabs" />
    <title>üé¥ Match ‚û°Ô∏è {data.players.map(player=>player.nick).join('‚öîÔ∏è')}</title>
    <!-- Favicon -->
    <link rel="icon" type="image/x-icon" sizes="256x256" href="/public/img/favicon/smashup.ico">
  </head>
  <body>
    <main>
        <div class="quickRef">
            <div class="baselist">
                <h2>Deck of Bases</h2>
                <!-- <Code code={JSON.stringify(activebases, null, 2)} lang="json"/> -->
                <ul class="base-deck">
                    {basedeck.map(base => (
                        data.gamedata.active_bases.includes(base.base)
                            ? <li class="active-base"><span>{base.faction}</span><span>{base.base}</span></li>
                            : data.gamedata.discarded_bases.includes(base.base) 
                            ? <li class="discarded-base"><span>{base.faction}</span><span>{base.base}</span></li>
                        : <li class="base"><span>{base.faction}</span><span>{base.base}</span></li>
                    ))} 
                </ul>
            </div>
            <hr style="margin:32px 0px"/>
            <div class="turns">
                <h2>Phases of a Turn</h2>
                <div class="phases"><h3>1: Start Turn</h3></div>
                <div class="phases">
                    <h3>2: Play Cards</h3>
                    <p>1 Action & 1 Minion, any order</p>
                </div>
                <div class="phases">
                    <h3>3: Score Bases</h3>
                    <p>For each base, is minion total power equal to its breakpoint?</p>
                    <h4>Yes!</h4>
                    <ol class="steps">
                        <li>Before Base Scores</li>
                        <li>Score Bases</li>
                        <li>After Base Scores</li>
                    </ol>
                </div>
                <div class="phases"><h3>4: Draw 2 Cards</h3></div>
                <div class="phases"><h3>5: End Turn</h3></div>
            </div>
            <hr/>
            
        </div>
        <div class="standings">
            <h1>Standings</h1>
            <table class="score-card">
                <thead>
                    <tr>
                        <th rowspan="3" class="rt">#</th>
                        <th rowspan="2" class="p">Player</th>
                        {data.players.map(player => (
                            <th class="player">{player.name}</th>
                        ))}
                    </tr>
                    <tr class="factions">
                        {data.players.map(player => (
                            <th><span>{player.factions[0]}</span> <br/><span>{player.factions[1]}</span></th>
                        ))}
                    </tr>
                    <tr class="total-scores">
                        <th class="vps-title">Victory Points!</th>
                        {data.score.current.map(score => (
                            <td class="player-total">{score}</td>
                        ))}
                    </tr>
                </thead>
                <tbody>
                    { data.score.log.map((round, roundIndex) => (                               /* iterate through the rounds of the game */
                        round.some(r => Object.keys(r).length > 0) ? (                          /* if the 'round' array has objects with keys, output them */
                            round.map((turn, turnIndex) => (                                    /* iterate through the turns of the round */
                                turn.scoring? turn.scoring.map((score, scoreIndex) => (         /* if turn.scoring exists, output a row with the scoring data */
                                    <tr data-r={roundIndex} data-t={turnIndex} class="turn scoring">
                                        {scoreIndex == 0 ?                                      /* create tds for round & turn that cover all rows, only once */
                                            <th class="rt-num" rowspan={turn.scoring.length}><span>{roundIndex} - {turnIndex}</span></th>
                                        : null }
                                        <td class="base-name">{score.base}</td>
                                        {score.vps[1].length == 0 ? 
                                            score.vps[0].map((vp, vpIndex) => (                 /* if scores do not have modifiers, output only first array */
                                                <td class="vps" data-vp={vp}>
                                                    <span class="vp">{vp}</span>
                                                </td>
                                            )) : score.vps[0].map((vp, vpIndex) => (            /* if scores have modifiers, output both as text */
                                                <td class="vps" data-vp={vp + score.vps[1][vpIndex]}>
                                                    <span class="vp">{vp}</span>
                                                    {score.vps[1][vpIndex] != 0 ? <span class="vp-mods">{score.vps[1][vpIndex]}</span> : null}
                                                </td>
                                            ))
                                        }
                                    </tr>
                                )) : null
                            ))
                        ) : <tr data-r={roundIndex} class="round noscore"><th class= "rt-num blank"></th><td colspan="5">Round {roundIndex}</td></tr> 
                    ))} 
                </tbody>
            </table>
        </div>
        <div class="active-bases">
            <h1>Active Bases</h1>
            <div>
                {activebases.map(base => (
                    <div class="card">
                        <div class="card_top">
                            <h2 class="bp-head"><span class="bp">{base.bp}</span> | {base.base}</h2>
                            <ul class="vps">
                                {base.vps.map(vp => (
                                    <li>{vp}</li>
                                ))}
                            </ul>
                        </div>
                        <p class="ability">{base.ability}</p>
                    </div>
                ))}
            </div>
        </div>
        <Code code={JSON.stringify(data, null, 2)} lang="json"/>
    </main>
  </body>
</html>
<style>
    .active-bases {
        
        padding: 0 1rem;
    }
    .card {
        display:flex;
        flex-direction:column;
        font-size: 1.25em;
        /* glassmorphism */
        background: rgba(80, 20, 150, 0.8);
        color: #ddd !important;
        box-shadow: 0 0 24px 3px rgba( 0, 0, 0, 0.37 ) inset;
        backdrop-filter: blur(10px);
        border-radius: 0.5rem;
        margin: 1.5rem 0;
        /* padding: 0.5rem 1rem; */
    }
    .card_top {
        padding: 4px 16px;
    }
    .card p {
        padding: 4px 16px 4px 32px;
    }
    .card_top {
        background: rgba(50, 0, 30, 0.4);
        box-shadow: 0 0 24px 3px rgba( 0, 0, 0, 0.37 ) inset;
        display:flex;
        flex-direction: row;
        justify-content: space-between;
        align-items: center;
        margin:0;
        /* padding:0; */
    }
    .card p {
        margin:8px 0px;
        font-size:1.25em;
        line-height: 1em;
        color: #eee;
        font-weight:100;
        font-family: sans-serif;
    }
    .card_top h2 {
        line-height: 1em;
        margin: 0;
        padding: 0;
    }
    .bp-head {
        display:inline-block;
    }
    .card ul.vps {
        display:inline-flex;
        margin-right:0px;
        font: monospace;
        font-size: 1.25em;
    }
html {
    padding: 0;
    margin: 0;
    font-size: 20px;
    line-height: 1.5em;
}
body {
    background: #090018;
    color: #ddd;
    font-family: sans-serif;
    padding:0px;
    margin:0px;
}
main {
    display: grid;
    grid-template-columns: 500px 1fr 700px; 
    gap: 1rem;
}
table {
    /* background: #240039; */
    border-collapse: collapse;
    width: 100%;
    text-align: center;
    /* box-shadow: 0 0 5px 1px #210308; */
}
.standings {
    padding:8px 32px;
    
}
thead th, td {
    padding: 0.5rem;
}
tr.noscore td{
    padding:4px;
    color:#aaa;
    font-weight: bold;
    font-size:12px;
    /* border: 1px solid #262626; */
    /* border-radius: 0.5rem; */
    /* box-shadow: 0 0 10px 2px #000 inset; */
}
thead {
    /* border: 1px solid #777; */
    /* border-bottom: 1px solid #555; */
    background-color: #292222;
    color: #ddd;
}
thead th {
    font-weight: bold;
    font-size: 1.5rem;
    /* border-left:4px solid #444; */
}
thead tr th.player {
    font-size:1.5em;
    text-transform: uppercase;
    padding-bottom:unset;
    background:#121212;
}
thead tr.total-scores th,
thead tr.total-scores td {
    /* border-top: 2px solid #555; */
    background-color: #310031;
    font-weight: bold;
    font-size: 2rem;
    background: #000;
    color: white;
    /* border-bottom: 1px solid white; */
}
thead tr.total-scores .vps-title {
    font-size: 1.25rem;
}
thead tr.total-scores th {
    /* border-left: 1px solid #777; */
}
thead tr.total-scores td {
    font-family: monospace;
    padding: 0;
    margin:0;
}
th.rt {
    /* width: 32px; */
    font-size: 1.5rem;
    font-weight: bold;
    background-color: #000010;
    color: #ddd;
}
th.rt-num {
    /* border-right: 1px solid #777; */
    /* border-left: 1px solid #777; */
}
tbody tr:last-child th {
    /* border-bottom-width: 1px;
    border-bottom-style: solid;
    border-bottom-color: #444; */
}
tbody tr:first-of-type{
    border-top-width: 1px;
    border-top-style: solid;
    border-top-color: #444;
}
.scoring th.rt-num {
    padding:0;
    margin:0;
    /* font-family: monospace; */
    font-size: 14px;
    font-weight: bold;
    background-color: #242434;
    color: #aaa;
    
}
.scoring th.rt-num {
    /* border-top: 1px solid #777; */
    /* border-bottom: 1px solid #777; */
}
.noscore th.rt-num {
    border:unset !important;
    /* border-color: #111; */
    /* background-color: #181200; */
}
.baselist ul {
    list-style-type: none;
    margin: 0;
    padding: 0;
}
.baselist ul li {
    display: flex;
    justify-content: space-between;
    padding: 0rem;
    /* border-bottom: 1px solid #777;*/
    font-size: 1rem;
}
span.vp, span.vp-mods {
    font-family: monospace;
    font-size: 1.25em;
    font-weight: 400;
}
td.vps[data-vp="0"] {
    background: #000000aa;
    color: #000000;
    box-shadow: 0 0 12px 1px #00005590 inset;
    text-align: center;
    padding: 1px;
    font-size:0px;
    /* border-bottom: 1px solid #333; */
}
tr.factions th span {
    color: #999 !important;
    font-size:0.75em;
    line-height: 1.25em;
}
.vps {
    position: relative;
}
span.vp-mods{
    color: #eea;
    font-size: 1em;
    font-weight: 400;

}
span.vp-mods::before {
    /* content: ""; */
    /* font-size: 1.25em; */
    /* margin-right: 0.25em; */
    /* color: #cc9; */
}
ul.vps {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    margin: 0;
    padding: 0;
}
ul.vps li {
    list-style-type: none;
    margin: 0rem 0.5rem;
    padding: 0rem 0.5rem;
    display: inline-block;
    color: #ddd;
}
ul.base-deck {

}
.turn.scoring {
    background:#c7a700;
    color:black;
    font-weight: bold;
    /* text-transform: uppercase; */
}
.scoring td.base-name {
    background:#004777;
    border-right:8px solid #000020;
    color:white;
}
.turn.scoring + .turn.scoring {
    /* border:1px solid pink; */
    border-top:4px solid #000020;
}
.turn.scoring td {
    padding:4px;
}
.round {
    /* background:#000020; */
}
.round td {
    /* border:1px dashed rgba(30,80,255,0.18) !important; */
    border:unset !important;
    border-radius:0px !important;
    padding: 0 !important;
}
ul.base-deck li {
    /* glassmorphism */
    background: rgba(40, 40, 40, 0.8);
    color: #999 !important;
    /* box-shadow: 0 0 24px 3px rgba( 0, 0, 0, 0.37 ) inset; */
    backdrop-filter: blur(10px);
    border-radius: 0.5rem;
    margin: 4px 0;
    padding: 2px 8px !important;
}
ul.base-deck li.active-base {
    background: rgba(0, 140, 0, 0.4);
    /* box-shadow: 0 0 8px 1px rgba( 0, 0, 0, 1 ); */
    border: 1px solid #999;
    color:white !important;
}
ul.base-deck li.active-base::before {
    /* content: "‚úÖ"; */
    display: inline-block;
    position: absolute;
    top: auto;
    bottom: auto;
    left: -28px;
}
ul.base-deck li.discarded-base {
    background: rgba(60, 0, 0, 0.7);
    /* box-shadow: 0 0 16px 1px rgba( 0, 0, 0, 0.4 ) inset; */
    color: #777 !important;
    text-decoration: line-through;
}
.quickRef {
    background: #230333;
    padding:8px 32px;
}
/* 
    table {
        border-collapse: collapse;
        width: 100%;
        text-align: center;
    }
    thead th, td {
        border-bottom: 1px solid #777;
        padding: 0.5rem;
    }
    thead {
        border: 1px solid #777;
    }
    th {
        background-color: #442400;
        font-weight: bold;
        font-size: 1.25rem;
    }
    tbody td.fail {
        background:#000;
    }
    tbody td {
        font-family: monospace;
        font-size: 1.25em;
    }
    tbody th {
        font-size:1.25em;
        font-weight:600;
        background-color: #230000;
    }
  h1 {
    color: #cfcf00;
  }
  body > div {
    border: 1px solid black;
  }
  body {
    display:grid;
    /* grid-template-columns: 32px 1fr 500px; */
    /* grid-template-columns: 1fr 700px; 
    gap: 1rem;
    padding: 1rem;
    background: #221000;
    color: #ddd;
    font-family: sans-serif;
  }
  .active-bases {
    /* card container, vertical, glassmorphism */
    /* display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1rem;
    padding: 1rem;
  }
  .active-bases h1 {
    font-size: 2.5rem;
    font-weight: bold;
    color: #fff;
    text-shadow: 1px 1px 2px #000;
    margin:unset;
  }
  .card {
    /* dark purple glassmorphism */
    /* background: rgba(105, 50, 0, 0.4);
    box-shadow: 0 8px 16px 0 rgba( 31, 38, 135, 0.37 );
    backdrop-filter: blur(10px);
    border-radius: 0.5rem;
    margin: 1rem 0;
    padding: 1rem;
  }
    .card h2 {
        font-size: 2.5rem;
        font-weight: bold;
        color: #fff;
        text-shadow: 1px 1px 2px #000;
    }
    .card p {
        color: #fff;
        text-shadow: 1px 1px 2px #000;
        font-size: 1.4em;
        font-weight:100;
        margin-top:0.5em !important;
    }
  .card ul {
    display:none;
  }
  .card li, .card ul {
    list-style-type: none;
    margin: 0;
    padding: 0;
  }
  .card li {
    margin: 0.5rem;
    display: inline-block;
    font-family: impact;
    font-size: 3rem;
  }
  .card ul, .card p, .card h2 {
    margin:0;
    padding: 0;
  }
  td.fail {
    padding:1px;
    border-bottom:1px solid #555;
  }
.turns{
    display:none;
}
.active-bases{
    display:flex;
    flex-direction:row;
    flex-wrap:wrap;
}
tr th.x-fail {
    font-size:1px;
}
th hr {
    border: 1px dashed #555;
    width: 100%;
    margin: 0.1rem 0;
}
.round.none td {
    background: #000;
    color: #bbb;
    text-align: center;
    padding: 1px;
    font-size:12px;
    border-bottom: 1px solid #333;
}
.turn.x td {
    background: #000;
    color: #bbb;
    text-align: center;
    padding: 1px;
    font-size:12px;
    border-bottom: 1px solid #333;
} */
</style>